<%- include('partials/header.ejs') %>

<!-- FullCalendar CSS -->
<link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.css" rel="stylesheet">

<style>
  #calendar {
    max-width: 1200px;
    margin: 40px auto;
    background-color: white;
    padding: 20px;
    border-radius: 10px;
  }
  .form-section {
    max-width: 900px;
    margin: 20px auto;
    background: white;
    padding: 20px;
    border-radius: 10px;
  }
  .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    padding-top: 100px;
    left: 0; top: 0; width: 100%; height: 100%;
    overflow: auto;
    background-color: rgba(0,0,0,0.4);
  }
  .modal-content {
    margin: auto;
    background-color: #fff;
    padding: 20px;
    border-radius: 5px;
    width: 400px;
  }
  .close {
    float: right;
    font-size: 24px;
    cursor: pointer;
  }
</style>

<div id="content">
  <%- include('partials/navbar.ejs') %>

  <!-- Slot Creation Form -->
  <div class="form-section">
    <h4 class="mb-3">Create Meeting Slots for Date Range</h4>
    <form id="allDaysForm">
      <div class="row g-3">
        <div class="col-md-3">
          <label for="fromDate" class="form-label">From Date</label>
          <input type="date" class="form-control" id="fromDate" required>
        </div>
        <div class="col-md-3">
          <label for="toDate" class="form-label">To Date</label>
          <input type="date" class="form-control" id="toDate" required>
        </div>
        <div class="col-md-2">
          <label for="allStartTime" class="form-label">Start Time</label>
          <input type="time" class="form-control" id="allStartTime" value="09:00" required>
        </div>
        <div class="col-md-2">
          <label for="allEndTime" class="form-label">End Time</label>
          <input type="time" class="form-control" id="allEndTime" value="17:00" required>
        </div>
        <div class="col-md-2">
          <label for="slotCountPerDay" class="form-label"># Slots/Day</label>
          <input type="number" class="form-control" id="slotCountPerDay" value="6" min="1" max="24" required>
        </div>
        <div class="col-md-2">
          <label for="daysOfWeek" class="form-label">Days</label>
          <select class="form-control" id="daysOfWeek" required>
            <option value="monday">Monday</option>
            <option value="tuesday">Tuesday</option>
            <option value="wednesday">Wednesday</option>
            <option value="thursday">Thursday</option>
            <option value="friday">Friday</option>
            <option value="saturday">Saturday</option>
            <option value="sunday">Sunday</option>
          </select>
        </div>
        <div class="col-md-3">
          <label for="employeeType" class="form-label">Employee Type</label>
          <select class="form-control" id="employeeType" required>
            <option value="">Loading...</option>
          </select>
        </div>
      </div>
      <div class="mt-3 text-end">
        <button type="submit" class="btn btn-success">Generate Slots</button>
      </div>
    </form>
  </div>

  <h2 style="text-align:center;">Calendly-Style Slot Calendar</h2>
  <div id="calendar"></div>

  <!-- Slot Modal -->
  <div id="slotModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="closeModal()">&times;</span>
      <h3>Manage Slot</h3>

      <div>
        <strong>Date:</strong> <span id="selectedDateText"></span><br>
        <strong>Start:</strong> <span id="modalStartTime"></span><br>
        <strong>End:</strong> <span id="modalEndTime"></span><br>
        <strong>Employee Type:</strong> <span id="modalEmployeeType"></span><br>
        <strong>Status:</strong>
        <select id="modalStatus" class="form-control mb-2">
            <option value="available">Available</option>
            <option value="booked">Booked</option>
            <option value="blocked">Blocked</option>
            <option value="rescheduled">Rescheduled</option>
        </select>
      </div>

      <!-- <div class="mt-2">
        <button onclick="updateSlotStatus()" class="btn btn-primary">Update Status</button>
      </div> -->

      <hr>
      <button onclick="blockSlot()" class="btn btn-danger mt-2">Block Slot</button>
      <button onclick="blockFullDate()" class="btn btn-dark mt-2">Block Full Day</button>
      <button onclick="unblockFullDate()" class="btn btn-success mt-2">Unblock Full Day</button>

      <hr>
      <h5>Reschedule Slot</h5>
      <input type="date" id="rescheduleDate" class="form-control mb-2">
      <input type="time" id="rescheduleStartTime" class="form-control mb-2">
      <input type="time" id="rescheduleEndTime" class="form-control mb-2">
      <button onclick="rescheduleSlot()" class="btn btn-warning">Reschedule</button>
    </div>
  </div>
</div>

<!-- Scripts -->
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js"></script>
<script>
  let calendar;
  let selectedEvent = null;
  let selectedSlotData = null;
  let currentEmployeeType = "";
  let employeeTypeColors = {};
  const defaultColors = [
    "#ff5722", "#4caf50", "#2196f3", "#9c27b0", "#ff9800", "#795548", "#607d8b", "#e91e63", "#3f51b5", "#00bcd4"
  ];
  let employeeTypesList = [];

  // --- Fetch and populate employee types (assign colors by index) ---
  async function populateEmployeeTypesAndColors() {
    const empTypeSelect = document.getElementById("employeeType");
    empTypeSelect.innerHTML = "<option value=''>Loading...</option>";
    try {
      const res = await fetch("/admin/calendar/employee-types");
      const data = await res.json();
      employeeTypesList = data;
      employeeTypeColors = {};

      if (data.length === 0) {
        empTypeSelect.innerHTML = "<option value=''>No Employee Types</option>";
      } else {
        empTypeSelect.innerHTML = "<option value=''>Select Employee Type</option>";
        data.forEach((type, i) => {
          empTypeSelect.innerHTML += `<option value="${type._id}">${type.type}</option>`;
          employeeTypeColors[type._id] = defaultColors[i % defaultColors.length];
        });
      }
    } catch (err) {
      empTypeSelect.innerHTML = "<option value=''>Error Loading Types</option>";
    }
  }

  // Fetch and render slots for the selected employee type
  async function loadSlotsForEmployeeType(employeeTypeId) {
    const calendarEl = document.getElementById("calendar");
    if (calendar) calendar.destroy();

    let url = "/admin/calendar/slots";
    if (employeeTypeId) url += `?employeeType=${employeeTypeId}`;
    const slotResponse = await fetch(url);
    const slotData = await slotResponse.json();

    // Save slot data for easy lookup by id
    window.slotDataMap = {};
    slotData.forEach(slot => {
      window.slotDataMap[slot._id] = slot;
    });

    const events = slotData.map(slot => {
      const empTypeId = slot.employeeType?._id || slot.employeeType;
      let empTypeName = slot.employeeType?.type;
      if (!empTypeName && employeeTypesList.length > 0) {
        const found = employeeTypesList.find(e => e._id === empTypeId);
        empTypeName = found ? found.type : "";
      }
      const statusLabel = slot.status ? slot.status.charAt(0).toUpperCase() + slot.status.slice(1) : '';
      return {
        id: slot._id,
        title: `[${empTypeName}] ${statusLabel}`,
        start: slot.start,
        end: slot.end,
        backgroundColor: employeeTypeColors[empTypeId] || "#bdbdbd",
        borderColor: employeeTypeColors[empTypeId] || "#bdbdbd"
      };
    });

    calendar = new FullCalendar.Calendar(calendarEl, {
      initialView: "timeGridWeek",
      headerToolbar: {
        left: "prev,next today",
        center: "title",
        right: "timeGridDay,timeGridWeek,dayGridMonth"
      },
      allDaySlot: false,
      height: "auto",
      slotMinTime: "06:00:00",
      slotMaxTime: "22:00:00",
      nowIndicator: true,
      selectable: true,
      events,
      eventClick: function (info) {
        selectedEvent = info.event;
        selectedSlotData = window.slotDataMap[selectedEvent.id];
        document.getElementById("selectedDateText").textContent = selectedEvent.start.toISOString().split("T")[0];
        document.getElementById("modalStartTime").textContent = selectedEvent.start.toTimeString().slice(0, 5);
        document.getElementById("modalEndTime").textContent = selectedEvent.end.toTimeString().slice(0, 5);

        // Set Employee Type in Modal
        let empType = '';
        if (selectedSlotData && selectedSlotData.employeeType) {
          empType = selectedSlotData.employeeType.type || selectedSlotData.employeeType;
          if (!selectedSlotData.employeeType.type && employeeTypesList.length > 0) {
            const found = employeeTypesList.find(e => e._id === selectedSlotData.employeeType);
            empType = found ? found.type : '';
          }
        }
        document.getElementById("modalEmployeeType").textContent = empType;

        // Set Status in Modal Select
        if (selectedSlotData && selectedSlotData.status) {
            document.getElementById("modalStatus").value = selectedSlotData.status;
        }

        document.getElementById("rescheduleDate").value = selectedEvent.start.toISOString().split("T")[0];
        openModal();
      }
    });

    calendar.render();
  }

  document.addEventListener("DOMContentLoaded", async function () {
    await populateEmployeeTypesAndColors();

    // Render calendar for currently selected employeeType on load
    const empTypeSelect = document.getElementById("employeeType");
    currentEmployeeType = empTypeSelect.value;
    await loadSlotsForEmployeeType(currentEmployeeType);

    // When employeeType changes, reload the calendar
    empTypeSelect.addEventListener("change", async function () {
      currentEmployeeType = this.value;
      await loadSlotsForEmployeeType(currentEmployeeType);
    });

    // Handle slot generation form submission
    document.getElementById("allDaysForm").addEventListener("submit", async function (e) {
      e.preventDefault();
      const fromDate = document.getElementById("fromDate").value;
      const toDate = document.getElementById("toDate").value;
      const startTime = document.getElementById("allStartTime").value;
      const endTime = document.getElementById("allEndTime").value;
      const slotsPerDay = document.getElementById("slotCountPerDay").value;
      const dayOfWeek = document.getElementById("daysOfWeek").value;
      const employeeType = document.getElementById("employeeType").value;

      if (!employeeType) {
        alert("Please select an Employee Type.");
        return;
      }

      const response = await fetch("/admin/calendar/generate-slots", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ fromDate, toDate, startTime, endTime, slotsPerDay, dayOfWeek, employeeType })
      });

      const result = await response.json();
      alert(result.message);
      // After slot creation, reload calendar for selected employee type:
      await loadSlotsForEmployeeType(employeeType);
    });
  });

  function openModal() {
    document.getElementById("slotModal").style.display = "block";
  }

  function closeModal() {
    document.getElementById("slotModal").style.display = "none";
  }

  async function blockSlot() {
    if (!selectedEvent) return;
    await fetch(`/admin/calendar/block-slot/${selectedEvent.id}`, { method: 'PATCH' });
    await loadSlotsForEmployeeType(currentEmployeeType);
    closeModal();
  }

  async function blockFullDate() {
    if (!selectedEvent) return;
    const date = selectedEvent.start.toISOString().split("T")[0];
    await fetch(`/admin/calendar/block-day/${date}`, { method: 'PATCH' });
    await loadSlotsForEmployeeType(currentEmployeeType);
    closeModal();
  }

  async function unblockFullDate() {
    if (!selectedEvent) return;
    const date = selectedEvent.start.toISOString().split("T")[0];
    await fetch(`/admin/calendar/unblock-day/${date}`, { method: 'PATCH' });
    await loadSlotsForEmployeeType(currentEmployeeType);
    closeModal();
  }

  async function rescheduleSlot() {
    const newStartDate = document.getElementById("rescheduleDate").value;
    const newStartTime = document.getElementById("rescheduleStartTime").value;
    const newEndTime = document.getElementById("rescheduleEndTime").value;
    if (!newStartDate || !newStartTime || !newEndTime || !selectedEvent) return;

    await fetch(`/admin/calendar/reschedule/${selectedEvent.id}`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        date: newStartDate,
        start: newStartTime,
        end: newEndTime
      })
    });

    await loadSlotsForEmployeeType(currentEmployeeType);
    closeModal();
  }

  async function updateSlotStatus() {
    if (!selectedEvent) return;
    const newStatus = document.getElementById("modalStatus").value;
    await fetch(`/admin/calendar/update-status/${selectedEvent.id}`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ status: newStatus })
    });
    await loadSlotsForEmployeeType(currentEmployeeType);
    closeModal();
  }
</script>
</body>
</html>