<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Video Meeting - <%= room.title %></title>
  
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Bootstrap Icons -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
  <!-- Socket.IO -->
  <script src="/socket.io/socket.io.js"></script>
  
  <style>
    :root {
      --primary-color: #0b3d2e;
      --secondary-color: #3e9278;
      --accent-color: #28a745;
      --danger-color: #dc3545;
      --warning-color: #ffc107;
      --dark-bg: #1a1a1a;
      --card-bg: #2d2d2d;
      --text-light: #ffffff;
      --text-muted: #b0b0b0;
      --border-color: #404040;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: var(--dark-bg);
      color: var(--text-light);
      overflow: hidden;
      height: 100vh;
    }

    .meeting-container {
      display: flex;
      height: 100vh;
      position: relative;
    }

    /* Main Video Area */
    .video-main {
      flex: 1;
      display: flex;
      flex-direction: column;
      background: var(--dark-bg);
    }

    .video-header {
      background: var(--card-bg);
      padding: 15px 20px;
      border-bottom: 1px solid var(--border-color);
      display: flex;
      justify-content: space-between;
      align-items: center;
      z-index: 100;
    }

    .meeting-info h4 {
      margin: 0;
      color: var(--text-light);
      font-size: 1.2rem;
    }

    .meeting-info p {
      margin: 0;
      color: var(--text-muted);
      font-size: 0.9rem;
    }

    .connection-status {
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .status-indicator {
      width: 8px;
      height: 8px;
      border-radius: 50%;
      background: var(--accent-color);
    }

    .status-indicator.poor { background: var(--danger-color); }
    .status-indicator.fair { background: var(--warning-color); }
    .status-indicator.good { background: var(--accent-color); }
    .status-indicator.excellent { background: #00ff00; }

    /* Video Grid */
    .video-grid {
      flex: 1;
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 10px;
      padding: 20px;
      overflow-y: auto;
      background: var(--dark-bg);
    }

    .video-item {
      position: relative;
      background: var(--card-bg);
      border-radius: 12px;
      overflow: hidden;
      aspect-ratio: 16/9;
      min-height: 200px;
    }

    .video-item.fullscreen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      z-index: 9999;
      border-radius: 0;
    }

    .video-item video {
      width: 100%;
      height: 100%;
      object-fit: cover;
      background: var(--card-bg);
    }

    .video-overlay {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      background: linear-gradient(transparent, rgba(0,0,0,0.7));
      padding: 20px 15px 15px;
      color: white;
    }

    .participant-name {
      font-weight: 600;
      margin-bottom: 5px;
    }

    .participant-status {
      display: flex;
      align-items: center;
      gap: 10px;
      font-size: 0.9rem;
    }

    .status-icon {
      width: 20px;
      height: 20px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
      background: rgba(0,0,0,0.5);
    }

    .status-icon.muted { background: var(--danger-color); }
    .status-icon.video-off { background: var(--warning-color); }
    .status-icon.screen-sharing { background: var(--accent-color); }

    /* Controls */
    .video-controls {
      background: var(--card-bg);
      padding: 20px;
      border-top: 1px solid var(--border-color);
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 15px;
      z-index: 100;
    }

    .control-btn {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      border: none;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.2rem;
      cursor: pointer;
      transition: all 0.3s ease;
      background: var(--card-bg);
      color: var(--text-light);
      border: 2px solid var(--border-color);
    }

    .control-btn:hover {
      transform: scale(1.1);
      background: var(--primary-color);
    }

    .control-btn.active {
      background: var(--accent-color);
      border-color: var(--accent-color);
    }

    .control-btn.danger {
      background: var(--danger-color);
      border-color: var(--danger-color);
    }

    .control-btn.danger:hover {
      background: #c82333;
    }

    .control-btn.large {
      width: 60px;
      height: 60px;
      font-size: 1.4rem;
    }

    /* Sidebar */
    .meeting-sidebar {
      width: 350px;
      background: var(--card-bg);
      border-left: 1px solid var(--border-color);
      display: flex;
      flex-direction: column;
      transition: transform 0.3s ease;
    }

    .sidebar-header {
      padding: 20px;
      border-bottom: 1px solid var(--border-color);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .sidebar-header h5 {
      margin: 0;
      color: var(--text-light);
    }

    .close-sidebar {
      background: none;
      border: none;
      color: var(--text-muted);
      font-size: 1.2rem;
      cursor: pointer;
    }

    .sidebar-content {
      flex: 1;
      overflow-y: auto;
    }

    /* Participants List */
    .participants-section {
      padding: 20px;
    }

    .participant-item {
      display: flex;
      align-items: center;
      gap: 15px;
      padding: 15px;
      border-radius: 8px;
      margin-bottom: 10px;
      background: var(--dark-bg);
      transition: background 0.3s ease;
    }

    .participant-item:hover {
      background: var(--primary-color);
    }

    .participant-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background: var(--accent-color);
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 600;
      color: white;
    }

    .participant-info {
      flex: 1;
    }

    .participant-name {
      font-weight: 600;
      margin-bottom: 5px;
    }

    .participant-role {
      font-size: 0.8rem;
      color: var(--text-muted);
    }

    .participant-controls {
      display: flex;
      gap: 5px;
    }

    .participant-control-btn {
      width: 30px;
      height: 30px;
      border-radius: 50%;
      border: none;
      background: var(--border-color);
      color: var(--text-light);
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    /* Chat */
    .chat-section {
      display: flex;
      flex-direction: column;
      height: 100%;
    }

    .chat-messages {
      flex: 1;
      padding: 20px;
      overflow-y: auto;
    }

    .chat-message {
      margin-bottom: 15px;
      padding: 10px;
      border-radius: 8px;
      background: var(--dark-bg);
    }

    .message-header {
      display: flex;
      justify-content: space-between;
      margin-bottom: 5px;
    }

    .message-sender {
      font-weight: 600;
      color: var(--accent-color);
    }

    .message-time {
      font-size: 0.8rem;
      color: var(--text-muted);
    }

    .message-content {
      color: var(--text-light);
    }

    .chat-input {
      padding: 20px;
      border-top: 1px solid var(--border-color);
    }

    .chat-input form {
      display: flex;
      gap: 10px;
    }

    .chat-input input {
      flex: 1;
      padding: 10px 15px;
      border: 1px solid var(--border-color);
      border-radius: 25px;
      background: var(--dark-bg);
      color: var(--text-light);
    }

    .chat-input button {
      padding: 10px 20px;
      border: none;
      border-radius: 25px;
      background: var(--accent-color);
      color: white;
      cursor: pointer;
    }

    /* Responsive */
    @media (max-width: 768px) {
      .meeting-sidebar {
        position: fixed;
        top: 0;
        right: -350px;
        height: 100vh;
        z-index: 1000;
      }

      .meeting-sidebar.open {
        transform: translateX(-350px);
      }

      .video-grid {
        grid-template-columns: 1fr;
        padding: 10px;
      }

      .video-controls {
        padding: 15px;
        gap: 10px;
      }

      .control-btn {
        width: 45px;
        height: 45px;
        font-size: 1rem;
      }

      .control-btn.large {
        width: 55px;
        height: 55px;
        font-size: 1.2rem;
      }
    }

    /* Loading */
    .loading {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100vh;
      background: var(--dark-bg);
    }

    .spinner {
      width: 50px;
      height: 50px;
      border: 3px solid var(--border-color);
      border-top: 3px solid var(--accent-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    /* Notifications */
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 15px 20px;
      border-radius: 8px;
      color: white;
      z-index: 10000;
      animation: slideIn 0.3s ease;
    }

    .notification.success { background: var(--accent-color); }
    .notification.error { background: var(--danger-color); }
    .notification.warning { background: var(--warning-color); }

    @keyframes slideIn {
      from { transform: translateX(100%); opacity: 0; }
      to { transform: translateX(0); opacity: 1; }
    }
  </style>
</head>
<body>
  <div id="loading" class="loading">
    <div class="spinner"></div>
  </div>

  <div id="meeting-container" class="meeting-container" style="display: none;">
    <!-- Main Video Area -->
    <div class="video-main">
      <!-- Header -->
      <div class="video-header">
        <div class="meeting-info">
          <h4 id="meeting-title"><%= room.title %></h4>
          <p id="meeting-time"><%= new Date().toLocaleTimeString() %></p>
        </div>
        <div class="connection-status">
          <div class="status-indicator" id="connection-status"></div>
          <span id="connection-text">Connecting...</span>
        </div>
      </div>

      <!-- Video Grid -->
      <div class="video-grid" id="video-grid">
        <!-- Video items will be added here dynamically -->
      </div>

      <!-- Controls -->
      <div class="video-controls">
        <button class="control-btn" id="toggle-audio" title="Mute/Unmute">
          <i class="bi bi-mic-fill"></i>
        </button>
        <button class="control-btn" id="toggle-video" title="Video On/Off">
          <i class="bi bi-camera-video-fill"></i>
        </button>
        <button class="control-btn" id="toggle-screen-share" title="Share Screen">
          <i class="bi bi-display"></i>
        </button>
        <button class="control-btn" id="toggle-chat" title="Chat">
          <i class="bi bi-chat-dots"></i>
        </button>
        <button class="control-btn" id="toggle-participants" title="Participants">
          <i class="bi bi-people"></i>
        </button>
        <button class="control-btn" id="toggle-recording" title="Record">
          <i class="bi bi-record-circle"></i>
        </button>
        <button class="control-btn danger large" id="leave-meeting" title="Leave Meeting">
          <i class="bi bi-telephone-x"></i>
        </button>
      </div>
    </div>

    <!-- Sidebar -->
    <div class="meeting-sidebar" id="sidebar">
      <div class="sidebar-header">
        <h5 id="sidebar-title">Participants</h5>
        <button class="close-sidebar" id="close-sidebar">
          <i class="bi bi-x-lg"></i>
        </button>
      </div>
      <div class="sidebar-content" id="sidebar-content">
        <!-- Content will be loaded dynamically -->
      </div>
    </div>
  </div>

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  
  <script>
    // Configuration
    const config = {
      roomId: '<%= room.roomId %>',
      meetingId: '<%= room.meetingId %>',
      token: '<%= token %>',
      user: {
        id: '<%= user.id %>',
        name: '<%= user.name %>',
        email: '<%= user.email %>',
        role: '<%= user.role %>'
      },
      room: {
        title: '<%= room.title %>',
        settings: <%- JSON.stringify(room.settings) %>
      }
    };

    // WebRTC Configuration
    const rtcConfig = {
      iceServers: [
        { urls: 'stun:stun.l.google.com:19302' },
        { urls: 'stun:stun1.l.google.com:19302' },
        { urls: 'stun:stun2.l.google.com:19302' },
        { urls: 'stun:stun3.l.google.com:19302' },
        { urls: 'stun:stun4.l.google.com:19302' }
      ]
    };

    // Global variables
    let socket;
    let localStream;
    let screenStream;
    let peers = new Map();
    let participants = new Map();
    let isAudioEnabled = true;
    let isVideoEnabled = true;
    let isScreenSharing = false;
    let isRecording = false;
    let currentSidebar = 'participants';

    // Initialize the application
    async function init() {
      try {
        await initializeMedia();
        await connectToSocket();
        setupEventListeners();
        hideLoading();
      } catch (error) {
        console.error('Initialization error:', error);
        showNotification('Failed to initialize meeting', 'error');
      }
    }

    // Initialize media devices
    async function initializeMedia() {
      try {
        localStream = await navigator.mediaDevices.getUserMedia({
          video: config.room.settings.videoOnEntry,
          audio: config.room.settings.muteOnEntry ? false : true
        });

        isAudioEnabled = !config.room.settings.muteOnEntry;
        isVideoEnabled = config.room.settings.videoOnEntry;

        // Add local video to grid
        addVideoToGrid(config.user.id, localStream, true);
        updateControlButtons();
      } catch (error) {
        console.error('Media initialization error:', error);
        showNotification('Failed to access camera/microphone', 'error');
      }
    }

    // Connect to Socket.IO
    async function connectToSocket() {
      socket = io({
        auth: {
          token: config.token
        }
      });

      socket.on('connect', () => {
        console.log('Connected to server');
        updateConnectionStatus('excellent');
        
        // Join room
        socket.emit('join-room', {
          name: config.user.name,
          email: config.user.email,
          isAudioEnabled,
          isVideoEnabled
        });
      });

      socket.on('disconnect', () => {
        updateConnectionStatus('poor');
        showNotification('Connection lost', 'warning');
      });

      // Room events
      socket.on('room-joined', handleRoomJoined);
      socket.on('participant-joined', handleParticipantJoined);
      socket.on('participant-left', handleParticipantLeft);
      socket.on('participant-audio-toggled', handleParticipantAudioToggled);
      socket.on('participant-video-toggled', handleParticipantVideoToggled);
      socket.on('participant-screen-share-toggled', handleParticipantScreenShareToggled);

      // WebRTC events
      socket.on('offer', handleOffer);
      socket.on('answer', handleAnswer);
      socket.on('ice-candidate', handleIceCandidate);

      // Chat events
      socket.on('chat-history', handleChatHistory);
      socket.on('new-message', handleNewMessage);

      // Recording events
      socket.on('recording-started', handleRecordingStarted);
      socket.on('recording-stopped', handleRecordingStopped);

      // Error handling
      socket.on('error', (data) => {
        showNotification(data.message, 'error');
      });
    }

    // Event handlers
    function setupEventListeners() {
      // Control buttons
      document.getElementById('toggle-audio').addEventListener('click', toggleAudio);
      document.getElementById('toggle-video').addEventListener('click', toggleVideo);
      document.getElementById('toggle-screen-share').addEventListener('click', toggleScreenShare);
      document.getElementById('toggle-chat').addEventListener('click', () => toggleSidebar('chat'));
      document.getElementById('toggle-participants').addEventListener('click', () => toggleSidebar('participants'));
      document.getElementById('toggle-recording').addEventListener('click', toggleRecording);
      document.getElementById('leave-meeting').addEventListener('click', leaveMeeting);

      // Sidebar
      document.getElementById('close-sidebar').addEventListener('click', closeSidebar);

      // Chat form
      document.getElementById('chat-form')?.addEventListener('submit', sendMessage);

      // Window events
      window.addEventListener('beforeunload', handleBeforeUnload);
      window.addEventListener('resize', handleResize);
    }

    // Room event handlers
    function handleRoomJoined(data) {
      console.log('Joined room:', data);
      participants = new Map(data.room.participants.map(p => [p.id, p]));
      updateParticipantsList();
      
      // Connect to existing participants
      data.room.participants.forEach(participant => {
        if (participant.id !== config.user.id) {
          createPeerConnection(participant.id);
        }
      });
    }

    function handleParticipantJoined(data) {
      console.log('Participant joined:', data);
      participants.set(data.participant.id, data.participant);
      updateParticipantsList();
      createPeerConnection(data.participant.id);
    }

    function handleParticipantLeft(data) {
      console.log('Participant left:', data);
      participants.delete(data.participantId);
      removeVideoFromGrid(data.participantId);
      updateParticipantsList();
      
      // Close peer connection
      const peer = peers.get(data.participantId);
      if (peer) {
        peer.close();
        peers.delete(data.participantId);
      }
    }

    // WebRTC handlers
    async function createPeerConnection(participantId) {
      const peer = new RTCPeerConnection(rtcConfig);
      peers.set(participantId, peer);

      // Add local stream
      localStream.getTracks().forEach(track => {
        peer.addTrack(track, localStream);
      });

      // Handle incoming streams
      peer.ontrack = (event) => {
        const stream = event.streams[0];
        addVideoToGrid(participantId, stream);
      };

      // Handle ICE candidates
      peer.onicecandidate = (event) => {
        if (event.candidate) {
          socket.emit('ice-candidate', {
            target: participantId,
            candidate: event.candidate
          });
        }
      };

      // Create and send offer
      try {
        const offer = await peer.createOffer();
        await peer.setLocalDescription(offer);
        socket.emit('offer', {
          target: participantId,
          offer
        });
      } catch (error) {
        console.error('Error creating offer:', error);
      }
    }

    async function handleOffer(data) {
      const peer = new RTCPeerConnection(rtcConfig);
      peers.set(data.from, peer);

      // Add local stream
      localStream.getTracks().forEach(track => {
        peer.addTrack(track, localStream);
      });

      // Handle incoming streams
      peer.ontrack = (event) => {
        const stream = event.streams[0];
        addVideoToGrid(data.from, stream);
      };

      // Handle ICE candidates
      peer.onicecandidate = (event) => {
        if (event.candidate) {
          socket.emit('ice-candidate', {
            target: data.from,
            candidate: event.candidate
          });
        }
      };

      // Set remote description and create answer
      try {
        await peer.setRemoteDescription(data.offer);
        const answer = await peer.createAnswer();
        await peer.setLocalDescription(answer);
        socket.emit('answer', {
          target: data.from,
          answer
        });
      } catch (error) {
        console.error('Error handling offer:', error);
      }
    }

    async function handleAnswer(data) {
      const peer = peers.get(data.from);
      if (peer) {
        try {
          await peer.setRemoteDescription(data.answer);
        } catch (error) {
          console.error('Error handling answer:', error);
        }
      }
    }

    async function handleIceCandidate(data) {
      const peer = peers.get(data.from);
      if (peer) {
        try {
          await peer.addIceCandidate(data.candidate);
        } catch (error) {
          console.error('Error adding ICE candidate:', error);
        }
      }
    }

    // Control functions
    async function toggleAudio() {
      const audioTrack = localStream.getAudioTracks()[0];
      if (audioTrack) {
        audioTrack.enabled = !audioTrack.enabled;
        isAudioEnabled = audioTrack.enabled;
        
        socket.emit('toggle-audio', { isEnabled: isAudioEnabled });
        updateControlButtons();
        updateLocalVideoOverlay();
      }
    }

    async function toggleVideo() {
      const videoTrack = localStream.getVideoTracks()[0];
      if (videoTrack) {
        videoTrack.enabled = !videoTrack.enabled;
        isVideoEnabled = videoTrack.enabled;
        
        socket.emit('toggle-video', { isEnabled: isVideoEnabled });
        updateControlButtons();
        updateLocalVideoOverlay();
      }
    }

    async function toggleScreenShare() {
      if (!isScreenSharing) {
        try {
          screenStream = await navigator.mediaDevices.getDisplayMedia({
            video: true,
            audio: true
          });
          
          // Replace video track in all peer connections
          const videoTrack = screenStream.getVideoTracks()[0];
          peers.forEach(peer => {
            const sender = peer.getSenders().find(s => s.track?.kind === 'video');
            if (sender) {
              sender.replaceTrack(videoTrack);
            }
          });
          
          isScreenSharing = true;
          socket.emit('toggle-screen-share', { isSharing: true });
          updateControlButtons();
          showNotification('Screen sharing started', 'success');
        } catch (error) {
          console.error('Screen share error:', error);
          showNotification('Failed to start screen sharing', 'error');
        }
      } else {
        // Stop screen sharing
        screenStream.getTracks().forEach(track => track.stop());
        
        // Restore video track
        const videoTrack = localStream.getVideoTracks()[0];
        peers.forEach(peer => {
          const sender = peer.getSenders().find(s => s.track?.kind === 'video');
          if (sender) {
            sender.replaceTrack(videoTrack);
          }
        });
        
        isScreenSharing = false;
        socket.emit('toggle-screen-share', { isSharing: false });
        updateControlButtons();
        showNotification('Screen sharing stopped', 'success');
      }
    }

    function toggleSidebar(type) {
      const sidebar = document.getElementById('sidebar');
      const sidebarTitle = document.getElementById('sidebar-title');
      const sidebarContent = document.getElementById('sidebar-content');
      
      if (currentSidebar === type && sidebar.classList.contains('open')) {
        closeSidebar();
      } else {
        currentSidebar = type;
        
        if (type === 'participants') {
          sidebarTitle.textContent = 'Participants';
          sidebarContent.innerHTML = generateParticipantsHTML();
        } else if (type === 'chat') {
          sidebarTitle.textContent = 'Chat';
          sidebarContent.innerHTML = generateChatHTML();
        }
        
        sidebar.classList.add('open');
      }
    }

    function closeSidebar() {
      document.getElementById('sidebar').classList.remove('open');
    }

    function toggleRecording() {
      if (config.user.role !== 'host') {
        showNotification('Only the host can record', 'warning');
        return;
      }
      
      if (!isRecording) {
        socket.emit('start-recording');
        showNotification('Recording started', 'success');
      } else {
        socket.emit('stop-recording');
        showNotification('Recording stopped', 'success');
      }
    }

    function leaveMeeting() {
      if (confirm('Are you sure you want to leave the meeting?')) {
        // Stop all streams
        if (localStream) {
          localStream.getTracks().forEach(track => track.stop());
        }
        if (screenStream) {
          screenStream.getTracks().forEach(track => track.stop());
        }
        
        // Close all peer connections
        peers.forEach(peer => peer.close());
        
        // Disconnect socket
        if (socket) {
          socket.disconnect();
        }
        
        // Redirect
        window.location.href = '/';
      }
    }

    // UI functions
    function addVideoToGrid(participantId, stream, isLocal = false) {
      const videoGrid = document.getElementById('video-grid');
      const existingVideo = document.getElementById(`video-${participantId}`);
      
      if (existingVideo) {
        existingVideo.remove();
      }
      
      const videoItem = document.createElement('div');
      videoItem.className = 'video-item';
      videoItem.id = `video-${participantId}`;
      
      const video = document.createElement('video');
      video.autoplay = true;
      video.playsInline = true;
      video.muted = isLocal;
      
      if (isLocal) {
        video.mirrored = true;
      }
      
      video.srcObject = stream;
      
      const overlay = document.createElement('div');
      overlay.className = 'video-overlay';
      overlay.innerHTML = `
        <div class="participant-name">${isLocal ? 'You' : participants.get(participantId)?.name || 'Unknown'}</div>
        <div class="participant-status">
          <div class="status-icon ${!isAudioEnabled ? 'muted' : ''}" title="${isAudioEnabled ? 'Audio On' : 'Audio Off'}">
            <i class="bi bi-mic${isAudioEnabled ? '-fill' : '-mute-fill'}"></i>
          </div>
          <div class="status-icon ${!isVideoEnabled ? 'video-off' : ''}" title="${isVideoEnabled ? 'Video On' : 'Video Off'}">
            <i class="bi bi-camera-video${isVideoEnabled ? '-fill' : '-mute-fill'}"></i>
          </div>
          ${isScreenSharing ? '<div class="status-icon screen-sharing" title="Screen Sharing"><i class="bi bi-display"></i></div>' : ''}
        </div>
      `;
      
      videoItem.appendChild(video);
      videoItem.appendChild(overlay);
      videoGrid.appendChild(videoItem);
      
      // Add fullscreen functionality
      videoItem.addEventListener('dblclick', () => {
        if (videoItem.classList.contains('fullscreen')) {
          videoItem.classList.remove('fullscreen');
        } else {
          videoItem.classList.add('fullscreen');
        }
      });
    }

    function removeVideoFromGrid(participantId) {
      const videoItem = document.getElementById(`video-${participantId}`);
      if (videoItem) {
        videoItem.remove();
      }
    }

    function updateControlButtons() {
      const audioBtn = document.getElementById('toggle-audio');
      const videoBtn = document.getElementById('toggle-video');
      const screenBtn = document.getElementById('toggle-screen-share');
      const recordingBtn = document.getElementById('toggle-recording');
      
      audioBtn.innerHTML = `<i class="bi bi-mic${isAudioEnabled ? '-fill' : '-mute-fill'}"></i>`;
      audioBtn.classList.toggle('active', isAudioEnabled);
      
      videoBtn.innerHTML = `<i class="bi bi-camera-video${isVideoEnabled ? '-fill' : '-mute-fill'}"></i>`;
      videoBtn.classList.toggle('active', isVideoEnabled);
      
      screenBtn.classList.toggle('active', isScreenSharing);
      
      recordingBtn.classList.toggle('active', isRecording);
    }

    function updateLocalVideoOverlay() {
      const localVideo = document.getElementById(`video-${config.user.id}`);
      if (localVideo) {
        const overlay = localVideo.querySelector('.video-overlay');
        if (overlay) {
          overlay.innerHTML = `
            <div class="participant-name">You</div>
            <div class="participant-status">
              <div class="status-icon ${!isAudioEnabled ? 'muted' : ''}" title="${isAudioEnabled ? 'Audio On' : 'Audio Off'}">
                <i class="bi bi-mic${isAudioEnabled ? '-fill' : '-mute-fill'}"></i>
              </div>
              <div class="status-icon ${!isVideoEnabled ? 'video-off' : ''}" title="${isVideoEnabled ? 'Video On' : 'Video Off'}">
                <i class="bi bi-camera-video${isVideoEnabled ? '-fill' : '-mute-fill'}"></i>
              </div>
              ${isScreenSharing ? '<div class="status-icon screen-sharing" title="Screen Sharing"><i class="bi bi-display"></i></div>' : ''}
            </div>
          `;
        }
      }
    }

    function updateParticipantsList() {
      if (currentSidebar === 'participants') {
        const sidebarContent = document.getElementById('sidebar-content');
        sidebarContent.innerHTML = generateParticipantsHTML();
      }
    }

    function generateParticipantsHTML() {
      const participantsList = Array.from(participants.values());
      participantsList.push({
        id: config.user.id,
        name: config.user.name,
        role: config.user.role,
        isAudioEnabled,
        isVideoEnabled,
        isScreenSharing
      });
      
      return `
        <div class="participants-section">
          ${participantsList.map(participant => `
            <div class="participant-item">
              <div class="participant-avatar">
                ${participant.name.charAt(0).toUpperCase()}
              </div>
              <div class="participant-info">
                <div class="participant-name">
                  ${participant.name} ${participant.id === config.user.id ? '(You)' : ''}
                </div>
                <div class="participant-role">
                  ${participant.role.charAt(0).toUpperCase() + participant.role.slice(1)}
                </div>
              </div>
              <div class="participant-controls">
                <div class="status-icon ${!participant.isAudioEnabled ? 'muted' : ''}" title="${participant.isAudioEnabled ? 'Audio On' : 'Audio Off'}">
                  <i class="bi bi-mic${participant.isAudioEnabled ? '-fill' : '-mute-fill'}"></i>
                </div>
                <div class="status-icon ${!participant.isVideoEnabled ? 'video-off' : ''}" title="${participant.isVideoEnabled ? 'Video On' : 'Video Off'}">
                  <i class="bi bi-camera-video${participant.isVideoEnabled ? '-fill' : '-mute-fill'}"></i>
                </div>
                ${participant.isScreenSharing ? '<div class="status-icon screen-sharing" title="Screen Sharing"><i class="bi bi-display"></i></div>' : ''}
              </div>
            </div>
          `).join('')}
        </div>
      `;
    }

    function generateChatHTML() {
      return `
        <div class="chat-section">
          <div class="chat-messages" id="chat-messages">
            <!-- Messages will be loaded here -->
          </div>
          <div class="chat-input">
            <form id="chat-form">
              <input type="text" id="chat-input" placeholder="Type a message..." maxlength="1000">
              <button type="submit">
                <i class="bi bi-send"></i>
              </button>
            </form>
          </div>
        </div>
      `;
    }

    // Chat functions
    function handleChatHistory(data) {
      const chatMessages = document.getElementById('chat-messages');
      if (chatMessages) {
        chatMessages.innerHTML = data.messages.map(message => generateMessageHTML(message)).join('');
        chatMessages.scrollTop = chatMessages.scrollHeight;
      }
    }

    function handleNewMessage(data) {
      const chatMessages = document.getElementById('chat-messages');
      if (chatMessages) {
        chatMessages.innerHTML += generateMessageHTML(data);
        chatMessages.scrollTop = chatMessages.scrollHeight;
      }
    }

    function generateMessageHTML(message) {
      return `
        <div class="chat-message">
          <div class="message-header">
            <span class="message-sender">${message.sender.name}</span>
            <span class="message-time">${new Date(message.timestamp).toLocaleTimeString()}</span>
          </div>
          <div class="message-content">${message.message}</div>
        </div>
      `;
    }

    function sendMessage(event) {
      event.preventDefault();
      const input = document.getElementById('chat-input');
      const message = input.value.trim();
      
      if (message) {
        socket.emit('send-message', { message, type: 'text' });
        input.value = '';
      }
    }

    // Recording functions
    function handleRecordingStarted(data) {
      isRecording = true;
      updateControlButtons();
      showNotification('Recording started', 'success');
    }

    function handleRecordingStopped(data) {
      isRecording = false;
      updateControlButtons();
      showNotification(`Recording stopped (${data.duration}s)`, 'success');
    }

    // Utility functions
    function updateConnectionStatus(quality) {
      const statusIndicator = document.getElementById('connection-status');
      const statusText = document.getElementById('connection-text');
      
      statusIndicator.className = `status-indicator ${quality}`;
      statusText.textContent = quality.charAt(0).toUpperCase() + quality.slice(1);
    }

    function showNotification(message, type = 'success') {
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.remove();
      }, 3000);
    }

    function hideLoading() {
      document.getElementById('loading').style.display = 'none';
      document.getElementById('meeting-container').style.display = 'flex';
    }

    function handleBeforeUnload(event) {
      if (socket) {
        socket.disconnect();
      }
    }

    function handleResize() {
      // Handle responsive layout changes
    }

    // Initialize when DOM is loaded
    document.addEventListener('DOMContentLoaded', init);
  </script>
</body>
</html>